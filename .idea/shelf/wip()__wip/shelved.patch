Index: app/src/main/java/com/leehendryp/maytheforcebewithleehendry/feed/presentation/view/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.leehendryp.maytheforcebewithleehendry.feed.presentation.view\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Toast\nimport androidx.activity.viewModels\nimport androidx.appcompat.widget.SearchView\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.leehendryp.maytheforcebewithleehendry.R\nimport com.leehendryp.maytheforcebewithleehendry.core.MayTheFoceBeWithThisApplication\nimport com.leehendryp.maytheforcebewithleehendry.core.extensions.fadeIn\nimport com.leehendryp.maytheforcebewithleehendry.core.extensions.vanish\nimport com.leehendryp.maytheforcebewithleehendry.databinding.ActivityMainBinding\nimport com.leehendryp.maytheforcebewithleehendry.details.DetailsActivity\nimport com.leehendryp.maytheforcebewithleehendry.feed.domain.Character\nimport com.leehendryp.maytheforcebewithleehendry.feed.domain.Character.Companion.CHARACTER\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Success\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Error\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Search\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Loading\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedViewModel\nimport javax.inject.Inject\nimport androidx.appcompat.widget.SearchView.OnQueryTextListener\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.Action\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.UIState\n\nclass MainActivity : AppCompatActivity() {\n    @Inject\n    lateinit var viewModelFactory: ViewModelProvider.Factory\n    private val feedViewModel: FeedViewModel by viewModels { viewModelFactory }\n\n    private lateinit var feedAdapter: FeedAdapter\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        injectDependencies()\n        observeViewModel()\n        initRecyclerView()\n        initSearchView()\n        feedViewModel.process(Action.Fetch(1))\n    }\n\n    private fun initRecyclerView() {\n        feedAdapter = FeedAdapter(mutableSetOf(),\n            onClick = { showCharacterDetails(it) },\n            onSaveFavorite = { showCharacterDetails(it) }\n        )\n\n        binding.recyclerviewCharacters.apply {\n            layoutManager = LinearLayoutManager(this@MainActivity)\n            adapter = feedAdapter\n            // doOnScrollToEnd { feedViewModel.fetchPeople() }\n        }\n    }\n\n    private fun initSearchView() {\n        binding.searchBar\n            .apply {\n                //doOnQuerySubmit { feedViewModel.searchCharacterBy(it) }\n                //setOnQueryTextFocusChangeListener { _, hasFocus -> if (!hasFocus) feedViewModel.fetchPeople() }\n            }\n    }\n\n    private fun injectDependencies() =\n        (application as MayTheFoceBeWithThisApplication).appComponent.inject(this)\n\n    private fun observeViewModel() {\n        feedViewModel.state.observe(this, Observer(::updateUI))\n    }\n\n    private fun updateUI(state: UIState) {\n        toggleLoading()\n        when (state) {\n            is UIState.Success -> updateAdapterData()\n            is UIState.Failure -> showErrorMessage()\n        }\n    }\n\n    private fun clearAdapterList() = feedAdapter.clearList()\n\n    private fun updateAdapterData() {\n        feedAdapter.update((feedViewModel.state.value as Success).data.toSet())\n    }\n\n    private fun showErrorMessage() {\n        Toast.makeText(this, getString(R.string.error_message), Toast.LENGTH_LONG).show()\n    }\n\n    private fun toggleLoading() {\n        val animDuration: Long = 700\n        binding.containerLoadingWheel.apply {\n            if (feedViewModel.state.value == UIState.Loading) fadeIn(animDuration) else vanish(\n                animDuration\n            )\n        }\n    }\n\n    private fun showCharacterDetails(character: Character) {\n        val intent = Intent(this, DetailsActivity::class.java)\n        intent.putExtra(CHARACTER, character)\n        startActivity(intent)\n    }\n\n    //private fun saveFavorite(character: Character) = feedViewModel.saveFavorite(character)\n\n    private fun RecyclerView.doOnScrollToEnd(onLoadMore: () -> Unit) {\n        this.addOnScrollListener(EndlessOnScrollListener(onLoadMore))\n    }\n\n    private fun SearchView.doOnQuerySubmit(block: (String) -> Unit) {\n        setOnQueryTextListener(object : OnQueryTextListener {\n            override fun onQueryTextSubmit(query: String?): Boolean {\n                query?.let { block(it) }\n                return false\n            }\n\n            override fun onQueryTextChange(newText: String?): Boolean = false\n        })\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/leehendryp/maytheforcebewithleehendry/feed/presentation/view/MainActivity.kt	(revision 7bd0d238b410a55eb77c85dcf517843ff1a1e02d)
+++ app/src/main/java/com/leehendryp/maytheforcebewithleehendry/feed/presentation/view/MainActivity.kt	(date 1608571994000)
@@ -18,11 +18,6 @@
 import com.leehendryp.maytheforcebewithleehendry.details.DetailsActivity
 import com.leehendryp.maytheforcebewithleehendry.feed.domain.Character
 import com.leehendryp.maytheforcebewithleehendry.feed.domain.Character.Companion.CHARACTER
-import com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState
-import com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Success
-import com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Error
-import com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Search
-import com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedState.Loading
 import com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.FeedViewModel
 import javax.inject.Inject
 import androidx.appcompat.widget.SearchView.OnQueryTextListener
@@ -88,7 +83,7 @@
     private fun clearAdapterList() = feedAdapter.clearList()
 
     private fun updateAdapterData() {
-        feedAdapter.update((feedViewModel.state.value as Success).data.toSet())
+        feedAdapter.update((feedViewModel.state.value as UIState.Success).data.toSet())
     }
 
     private fun showErrorMessage() {
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n\n    ext {\n        jvmTarget = \"1.8\"\n\n        kotlinVersion = '1.4.21'\n        ktxVersion = '1.3.2'\n        androidCoroutinesVersion = \"1.4.1\"\n\n        gradleVersion = '4.1.0'\n\n        appCompatVersion = '1.2.0'\n        recyclerVersion = \"1.1.0\"\n        materialVersion = '1.2.1'\n        constraintLayoutVersion = '2.0.4'\n\n        databindingVersion = \"3.3.2\"\n        roomVersion = '2.2.6'\n        navigationVersion = '2.3.2'\n        lifecycleVersion = \"2.2.0\"\n\n        retrofitVersion = '2.9.0'\n        retrofitCoroutinesVersion = \"0.9.2\"\n        retrofitGsonVersion = '2.9.0'\n\n        daggerVersion = '2.30.1'\n\n        mockkVersion = '1.10.3'\n        mockWebServerVersion = \"2.7.5\"\n\n        jUnitVersion = '4.13.1'\n        extJUnitVersion = '1.1.2'\n        coreTestingVersion = \"2.1.0\"\n        expressoCoreVersion = '3.3.0'\n\n        ktlintVersion = \"0.29.0\"\n    }\n\n    repositories {\n        google()\n        jcenter()\n\n    }\n    dependencies {\n        classpath \"com.android.tools.build:gradle:$gradleVersion\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n        classpath \"androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion\"\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n    apply from: \"$rootDir/ktlint.gradle\"\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 7bd0d238b410a55eb77c85dcf517843ff1a1e02d)
+++ build.gradle	(date 1608571834000)
@@ -5,11 +5,11 @@
     ext {
         jvmTarget = "1.8"
 
-        kotlinVersion = '1.4.21'
+        kotlinVersion = '1.3.70'
         ktxVersion = '1.3.2'
         androidCoroutinesVersion = "1.4.1"
 
-        gradleVersion = '4.1.0'
+        gradleVersion = '3.6.1'
 
         appCompatVersion = '1.2.0'
         recyclerVersion = "1.1.0"
Index: app/src/main/java/com/leehendryp/maytheforcebewithleehendry/feed/presentation/viewmodel/FeedViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MediatorLiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.Transformations\nimport androidx.lifecycle.Transformations.switchMap\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.liveData\nimport androidx.lifecycle.viewModelScope\nimport com.leehendryp.maytheforcebewithleehendry.feed.data.remote.Resource\nimport com.leehendryp.maytheforcebewithleehendry.feed.domain.Character\nimport com.leehendryp.maytheforcebewithleehendry.feed.domain.FetchPeopleUseCase\nimport com.leehendryp.maytheforcebewithleehendry.feed.domain.Page\nimport com.leehendryp.maytheforcebewithleehendry.feed.domain.SaveFavoriteUseCase\nimport com.leehendryp.maytheforcebewithleehendry.feed.domain.SearchCharacterUseCase\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.UIState.Failure\nimport com.leehendryp.maytheforcebewithleehendry.feed.presentation.viewmodel.UIState.Success\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.launch\nimport javax.inject.Inject\n\nclass FeedViewModel @Inject constructor(\n    private val fetchPageUseCase: FetchPeopleUseCase,\n    private val searchCharacterUseCase: SearchCharacterUseCase,\n    private val saveFavoriteUseCase: SaveFavoriteUseCase\n) : ViewModel() {\n    private val action = MutableLiveData<Action>()\n\n    val state: LiveData<UIState> by lazy {\n        switchMap(action) { action ->\n            MediatorLiveData<UIState>().apply {\n                UIState.Loading\n                when (action) {\n                    is Action.Fetch -> fetchPage(action.page)\n                    else -> UIState.Loading\n                }\n            }\n        }\n    }\n\n    fun process(action: Action) {\n        this.action.value = action\n    }\n\n    private fun MediatorLiveData<UIState>.fetchPage(page: Int) {\n        viewModelScope.launch {\n            with(fetchPageUseCase.execute(page)) {\n                addSource(data) { page -> emit(Success(page.characters)) }\n                addSource(error) { error -> emit(Failure(error)) }\n            }\n        }\n    }\n\n    fun <T>MediatorLiveData<UIState>.addSourcesFrom(resource: Resource<T>) {\n        with(resource) {\n            addSource(data) { emit(Success(it)) }\n            addSource(error) { error -> emit(Failure(error)) }\n        }\n    }\n\n    private fun <T> emit(data: T): LiveData<T> = liveData { emit(data) }\n}\n\n\nsealed class UIState {\n    object Loading : UIState()\n    data class Success(val data: Page) : UIState()\n    data class Failure(val error: Throwable) : UIState()\n}\n\nsealed class Action {\n    data class Fetch(val page: Int) : Action()\n    data class Search(val query: String) : Action()\n    object ScrollDown : Action()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/leehendryp/maytheforcebewithleehendry/feed/presentation/viewmodel/FeedViewModel.kt	(revision 7bd0d238b410a55eb77c85dcf517843ff1a1e02d)
+++ app/src/main/java/com/leehendryp/maytheforcebewithleehendry/feed/presentation/viewmodel/FeedViewModel.kt	(date 1608571455000)
@@ -47,23 +47,17 @@
 
     private fun MediatorLiveData<UIState>.fetchPage(page: Int) {
         viewModelScope.launch {
-            with(fetchPageUseCase.execute(page)) {
-                addSource(data) { page -> emit(Success(page.characters)) }
-                addSource(error) { error -> emit(Failure(error)) }
-            }
+            addSourcesFrom(fetchPageUseCase.execute(page))
         }
     }
 
-    fun <T>MediatorLiveData<UIState>.addSourcesFrom(resource: Resource<T>) {
+    private fun MediatorLiveData<UIState>.addSourcesFrom(resource: Resource<Page>) {
         with(resource) {
             addSource(data) { emit(Success(it)) }
             addSource(error) { error -> emit(Failure(error)) }
         }
     }
-
-    private fun <T> emit(data: T): LiveData<T> = liveData { emit(data) }
 }
-
 
 sealed class UIState {
     object Loading : UIState()
@@ -75,4 +69,6 @@
     data class Fetch(val page: Int) : Action()
     data class Search(val query: String) : Action()
     object ScrollDown : Action()
-}
\ No newline at end of file
+}
+
+fun <T> emit(data: T): LiveData<T> = liveData { emit(data) }
\ No newline at end of file
